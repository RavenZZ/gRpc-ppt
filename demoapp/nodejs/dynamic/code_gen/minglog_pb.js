/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.minglogger.Developer', null, global);
goog.exportSymbol('proto.minglogger.ExecuteResult', null, global);
goog.exportSymbol('proto.minglogger.Extras', null, global);
goog.exportSymbol('proto.minglogger.LogLevel', null, global);
goog.exportSymbol('proto.minglogger.MingLog', null, global);
goog.exportSymbol('proto.minglogger.ServiceType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.minglogger.MingLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.minglogger.MingLog.repeatedFields_, null);
};
goog.inherits(proto.minglogger.MingLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.minglogger.MingLog.displayName = 'proto.minglogger.MingLog';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.minglogger.MingLog.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.minglogger.MingLog.prototype.toObject = function(opt_includeInstance) {
  return proto.minglogger.MingLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.minglogger.MingLog} msg The msg instance to transform.
 * @return {!Object}
 */
proto.minglogger.MingLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: msg.getTimestamp(),
    hostname: msg.getHostname(),
    servicetype: msg.getServicetype(),
    developer: msg.getDeveloper(),
    clientip: msg.getClientip(),
    stack: msg.getStack(),
    message: msg.getMessage(),
    action: msg.getAction(),
    accountid: msg.getAccountid(),
    projectid: msg.getProjectid(),
    level: msg.getLevel(),
    extrasList: jspb.Message.toObjectList(msg.getExtrasList(),
    proto.minglogger.Extras.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.minglogger.MingLog}
 */
proto.minglogger.MingLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.minglogger.MingLog;
  return proto.minglogger.MingLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.minglogger.MingLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.minglogger.MingLog}
 */
proto.minglogger.MingLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostname(value);
      break;
    case 3:
      var value = /** @type {!proto.minglogger.ServiceType} */ (reader.readEnum());
      msg.setServicetype(value);
      break;
    case 4:
      var value = /** @type {!proto.minglogger.Developer} */ (reader.readEnum());
      msg.setDeveloper(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientip(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStack(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountid(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectid(value);
      break;
    case 11:
      var value = /** @type {!proto.minglogger.LogLevel} */ (reader.readEnum());
      msg.setLevel(value);
      break;
    case 12:
      var value = new proto.minglogger.Extras;
      reader.readMessage(value,proto.minglogger.Extras.deserializeBinaryFromReader);
      msg.getExtrasList().push(value);
      msg.setExtrasList(msg.getExtrasList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.minglogger.MingLog} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.minglogger.MingLog.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.minglogger.MingLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.minglogger.MingLog.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getHostname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getServicetype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = this.getDeveloper();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = this.getClientip();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getStack();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getMessage();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getAction();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getAccountid();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getProjectid();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = this.getExtrasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.minglogger.Extras.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.minglogger.MingLog} The clone.
 */
proto.minglogger.MingLog.prototype.cloneMessage = function() {
  return /** @type {!proto.minglogger.MingLog} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 timeStamp = 1;
 * @return {number}
 */
proto.minglogger.MingLog.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.minglogger.MingLog.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string hostName = 2;
 * @return {string}
 */
proto.minglogger.MingLog.prototype.getHostname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.minglogger.MingLog.prototype.setHostname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional ServiceType serviceType = 3;
 * @return {!proto.minglogger.ServiceType}
 */
proto.minglogger.MingLog.prototype.getServicetype = function() {
  return /** @type {!proto.minglogger.ServiceType} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {!proto.minglogger.ServiceType} value  */
proto.minglogger.MingLog.prototype.setServicetype = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional Developer developer = 4;
 * @return {!proto.minglogger.Developer}
 */
proto.minglogger.MingLog.prototype.getDeveloper = function() {
  return /** @type {!proto.minglogger.Developer} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {!proto.minglogger.Developer} value  */
proto.minglogger.MingLog.prototype.setDeveloper = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string clientIp = 5;
 * @return {string}
 */
proto.minglogger.MingLog.prototype.getClientip = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.minglogger.MingLog.prototype.setClientip = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string stack = 6;
 * @return {string}
 */
proto.minglogger.MingLog.prototype.getStack = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.minglogger.MingLog.prototype.setStack = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string message = 7;
 * @return {string}
 */
proto.minglogger.MingLog.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.minglogger.MingLog.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string action = 8;
 * @return {string}
 */
proto.minglogger.MingLog.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.minglogger.MingLog.prototype.setAction = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string accountId = 9;
 * @return {string}
 */
proto.minglogger.MingLog.prototype.getAccountid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 9, ""));
};


/** @param {string} value  */
proto.minglogger.MingLog.prototype.setAccountid = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string projectId = 10;
 * @return {string}
 */
proto.minglogger.MingLog.prototype.getProjectid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 10, ""));
};


/** @param {string} value  */
proto.minglogger.MingLog.prototype.setProjectid = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional LogLevel level = 11;
 * @return {!proto.minglogger.LogLevel}
 */
proto.minglogger.MingLog.prototype.getLevel = function() {
  return /** @type {!proto.minglogger.LogLevel} */ (jspb.Message.getFieldProto3(this, 11, 0));
};


/** @param {!proto.minglogger.LogLevel} value  */
proto.minglogger.MingLog.prototype.setLevel = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * repeated Extras extras = 12;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.minglogger.Extras>}
 */
proto.minglogger.MingLog.prototype.getExtrasList = function() {
  return /** @type{!Array.<!proto.minglogger.Extras>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.minglogger.Extras, 12));
};


/** @param {Array.<!proto.minglogger.Extras>|undefined} value  */
proto.minglogger.MingLog.prototype.setExtrasList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 12, value);
};


proto.minglogger.MingLog.prototype.clearExtrasList = function() {
  this.setExtrasList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.minglogger.Extras = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.minglogger.Extras, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.minglogger.Extras.displayName = 'proto.minglogger.Extras';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.minglogger.Extras.prototype.toObject = function(opt_includeInstance) {
  return proto.minglogger.Extras.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.minglogger.Extras} msg The msg instance to transform.
 * @return {!Object}
 */
proto.minglogger.Extras.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey(),
    value: msg.getValue()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.minglogger.Extras}
 */
proto.minglogger.Extras.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.minglogger.Extras;
  return proto.minglogger.Extras.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.minglogger.Extras} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.minglogger.Extras}
 */
proto.minglogger.Extras.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.minglogger.Extras} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.minglogger.Extras.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.minglogger.Extras.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.minglogger.Extras.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.minglogger.Extras} The clone.
 */
proto.minglogger.Extras.prototype.cloneMessage = function() {
  return /** @type {!proto.minglogger.Extras} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.minglogger.Extras.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.minglogger.Extras.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.minglogger.Extras.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.minglogger.Extras.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.minglogger.ExecuteResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.minglogger.ExecuteResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.minglogger.ExecuteResult.displayName = 'proto.minglogger.ExecuteResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.minglogger.ExecuteResult.prototype.toObject = function(opt_includeInstance) {
  return proto.minglogger.ExecuteResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.minglogger.ExecuteResult} msg The msg instance to transform.
 * @return {!Object}
 */
proto.minglogger.ExecuteResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    issuccess: msg.getIssuccess(),
    error: msg.getError()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.minglogger.ExecuteResult}
 */
proto.minglogger.ExecuteResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.minglogger.ExecuteResult;
  return proto.minglogger.ExecuteResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.minglogger.ExecuteResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.minglogger.ExecuteResult}
 */
proto.minglogger.ExecuteResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.minglogger.ExecuteResult} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.minglogger.ExecuteResult.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.minglogger.ExecuteResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.minglogger.ExecuteResult.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getIssuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.minglogger.ExecuteResult} The clone.
 */
proto.minglogger.ExecuteResult.prototype.cloneMessage = function() {
  return /** @type {!proto.minglogger.ExecuteResult} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bool isSuccess = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.minglogger.ExecuteResult.prototype.getIssuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 1, false));
};


/** @param {boolean} value  */
proto.minglogger.ExecuteResult.prototype.setIssuccess = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.minglogger.ExecuteResult.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.minglogger.ExecuteResult.prototype.setError = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.minglogger.LogLevel = {
  DEBUG: 0,
  INFO: 1,
  WARN: 2,
  ERROR: 3,
  FATAL: 4
};

/**
 * @enum {number}
 */
proto.minglogger.ServiceType = {
  UNKNOWN: 0,
  MASTER: 1,
  API: 2,
  CALENDARSERVICE: 3,
  FOLDERSTATISTICS: 4,
  RABBITMQSOLORCONSUMERSERVICE: 5,
  EMAILSENDERSERVICE: 6,
  SMSSENDERSERVICE: 7,
  WEBHOOK: 8,
  CHATSOCKET: 9,
  CHATAPI: 10,
  CHATHTTP: 11,
  CHATAVATAR: 12,
  CHATQUEUE: 13,
  MYMAIL: 14,
  MYMAILUPLOADER: 15,
  MYMAILFILESERVICE: 16,
  OPTOOL: 17,
  TPLOGIN: 18,
  URLPARSER: 19,
  WEIXINMPSERVICE: 20,
  LP: 21,
  OWASERVICE: 22,
  RELATIONSERVICE: 23,
  COUNTING: 24,
  COUNTINGINTERNAL: 25,
  PUSHQUEUE: 26,
  PUSHSERVER: 27,
  MEETINGROOM: 28,
  OPEN: 29,
  MDMANAGE: 30,
  APPROVAL: 31,
  OA: 32,
  MDCRM: 33
};

/**
 * @enum {number}
 */
proto.minglogger.Developer = {
  UNDEFINED: 0,
  RAVENZHU: 1,
  JERRYJIN: 2,
  ERICYU: 3,
  SINZOU: 4,
  WELLSSHEN: 5,
  CARLOSEGAO: 6,
  LEOWU: 7,
  TOBYYANG: 8,
  RENNBONZHU: 9,
  BECKJIN: 10,
  ALLENSUN: 11
};

goog.object.extend(exports, proto.minglogger);
