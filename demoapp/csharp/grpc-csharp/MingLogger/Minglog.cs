// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minglog.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Minglogger {

  /// <summary>Holder for reflection information generated from minglog.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class MinglogReflection {

    #region Descriptor
    /// <summary>File descriptor for minglog.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MinglogReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1taW5nbG9nLnByb3RvEgptaW5nbG9nZ2VyIrcCCgdNaW5nTG9nEhEKCXRp",
            "bWVTdGFtcBgBIAEoBRIQCghob3N0TmFtZRgCIAEoCRIsCgtzZXJ2aWNlVHlw",
            "ZRgDIAEoDjIXLm1pbmdsb2dnZXIuU2VydmljZVR5cGUSKAoJZGV2ZWxvcGVy",
            "GAQgASgOMhUubWluZ2xvZ2dlci5EZXZlbG9wZXISEAoIY2xpZW50SXAYBSAB",
            "KAkSDQoFc3RhY2sYBiABKAkSDwoHbWVzc2FnZRgHIAEoCRIOCgZhY3Rpb24Y",
            "CCABKAkSEQoJYWNjb3VudElkGAkgASgJEhEKCXByb2plY3RJZBgKIAEoCRIj",
            "CgVsZXZlbBgLIAEoDjIULm1pbmdsb2dnZXIuTG9nTGV2ZWwSIgoGZXh0cmFz",
            "GAwgAygLMhIubWluZ2xvZ2dlci5FeHRyYXMiJAoGRXh0cmFzEgsKA2tleRgB",
            "IAEoCRINCgV2YWx1ZRgCIAEoCSIxCg1FeGVjdXRlUmVzdWx0EhEKCWlzU3Vj",
            "Y2VzcxgBIAEoCBINCgVlcnJvchgCIAEoCSo/CghMb2dMZXZlbBIJCgVEZWJ1",
            "ZxAAEggKBEluZm8QARIICgRXYXJuEAISCQoFRXJyb3IQAxIJCgVGYXRhbBAE",
            "Kq8ECgtTZXJ2aWNlVHlwZRILCgdVbmtub3duEAASCgoGTWFzdGVyEAESBwoD",
            "QVBJEAISEwoPQ2FsZW5kYXJTZXJ2aWNlEAMSFAoQRm9sZGVyU3RhdGlzdGlj",
            "cxAEEiAKHFJhYmJpdE1RU29sb3JDb25zdW1lclNlcnZpY2UQBRIWChJFbWFp",
            "bFNlbmRlclNlcnZpY2UQBhIUChBTbXNTZW5kZXJTZXJ2aWNlEAcSCwoHV2Vi",
            "SG9vaxAIEg4KCkNoYXRTb2NrZXQQCRILCgdDaGF0QXBpEAoSDAoIQ2hhdEh0",
            "dHAQCxIOCgpDaGF0QXZhdGFyEAwSDQoJQ2hhdFF1ZXVlEA0SCgoGTXlNYWls",
            "EA4SEgoOTXlNYWlsVXBsb2FkZXIQDxIVChFNeU1haWxGaWxlU2VydmljZRAQ",
            "EgoKBk9wVG9vbBAREgsKB1RwTG9naW4QEhINCglVcmxQYXJzZXIQExITCg9X",
            "ZWl4aW5NUFNlcnZpY2UQFBIGCgJMUBAVEg4KCk93YVNlcnZpY2UQFhITCg9S",
            "ZWxhdGlvblNlcnZpY2UQFxIMCghDb3VudGluZxAYEhQKEENvdW50aW5nSW50",
            "ZXJuYWwQGRINCglQdXNoUXVldWUQGhIOCgpQdXNoU2VydmVyEBsSDwoLTWVl",
            "dGluZ3Jvb20QHBIICgRPcGVuEB0SDAoITURNYW5hZ2UQHhIMCghBcHByb3Zh",
            "bBAfEgYKAk9BECASCQoFTURDUk0QISqxAQoJRGV2ZWxvcGVyEg0KCVVuZGVm",
            "aW5lZBAAEgwKCFJhdmVuWmh1EAESDAoISmVycnlKaW4QAhIKCgZFcmljWXUQ",
            "AxIKCgZTaW5ab3UQBBINCglXZWxsc1NoZW4QBRIOCgpDYXJsb3NlR2FvEAYS",
            "CQoFTGVvV3UQBxIMCghUb2J5WWFuZxAIEg4KClJlbm5ib25aaHUQCRILCgdC",
            "ZWNrSmluEAoSDAoIQWxsZW5TdW4QCzJKCgpMb2dTZXJ2aWNlEjwKCFdyaXRl",
            "TG9nEhMubWluZ2xvZ2dlci5NaW5nTG9nGhkubWluZ2xvZ2dlci5FeGVjdXRl",
            "UmVzdWx0IgBCHwoNbWQubG9nc2VydmljZUIGTG9nZ2VyUAGiAgNMTExiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Minglogger.LogLevel), typeof(global::Minglogger.ServiceType), typeof(global::Minglogger.Developer), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Minglogger.MingLog), global::Minglogger.MingLog.Parser, new[]{ "TimeStamp", "HostName", "ServiceType", "Developer", "ClientIp", "Stack", "Message", "Action", "AccountId", "ProjectId", "Level", "Extras" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Minglogger.Extras), global::Minglogger.Extras.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Minglogger.ExecuteResult), global::Minglogger.ExecuteResult.Parser, new[]{ "IsSuccess", "Error" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  日志级别
  /// </summary>
  public enum LogLevel {
    /// <summary>
    ///  对调试应用程序是非常有帮助
    /// </summary>
    [pbr::OriginalName("Debug")] Debug = 0,
    /// <summary>
    ///  突出强调应用程序的运行过程
    /// </summary>
    [pbr::OriginalName("Info")] Info = 1,
    /// <summary>
    ///  会出现潜在错误的情形
    /// </summary>
    [pbr::OriginalName("Warn")] Warn = 2,
    /// <summary>
    ///  已出现的错误, 但不影响系统的继续运行
    /// </summary>
    [pbr::OriginalName("Error")] Error = 3,
    /// <summary>
    ///  严重的错误事件将会导致应用程序的退出
    /// </summary>
    [pbr::OriginalName("Fatal")] Fatal = 4,
  }

  /// <summary>
  ///  服务类型
  /// </summary>
  public enum ServiceType {
    /// <summary>
    /// 未知
    /// </summary>
    [pbr::OriginalName("Unknown")] Unknown = 0,
    /// <summary>
    /// 主站
    /// mingdao.com
    /// repo: MD_Public
    /// folder: MHMD.Web
    /// </summary>
    [pbr::OriginalName("Master")] Master = 1,
    /// <summary>
    /// API
    /// api.mingdao.com
    /// repo: MD_Public
    /// folder: MD.API
    /// </summary>
    [pbr::OriginalName("API")] Api = 2,
    /// <summary>
    ///  日程Push服务
    ///  Windows服务
    /// repo: MD_Public
    /// folder: MD.CalendarService
    /// </summary>
    [pbr::OriginalName("CalendarService")] CalendarService = 3,
    /// <summary>
    ///  项目统计服务
    /// repo: MD_Public
    /// folder: FolderStatisticsService
    /// </summary>
    [pbr::OriginalName("FolderStatistics")] FolderStatistics = 4,
    /// <summary>
    /// RabbitMQ Solor 消费端服务
    /// repo: MD_Public
    /// MD.RabbitMQConsumerService
    /// </summary>
    [pbr::OriginalName("RabbitMQSolorConsumerService")] RabbitMqsolorConsumerService = 5,
    /// <summary>
    ///  发送邮件服务
    /// repo: MDServices-CSharp
    /// folder: MD.Email.API
    /// </summary>
    [pbr::OriginalName("EmailSenderService")] EmailSenderService = 6,
    /// <summary>
    ///  短信服务
    /// repo: MDServices-CSharp
    /// folder: MD.Sms.API
    /// </summary>
    [pbr::OriginalName("SmsSenderService")] SmsSenderService = 7,
    /// <summary>
    ///  WebHook 
    /// repo: MDServices-CSharp
    /// folder: MD.WebHook.API
    /// </summary>
    [pbr::OriginalName("WebHook")] WebHook = 8,
    /// <summary>
    ///  Chat Socket 连接
    /// repo: MDNode
    /// folder: MD.Messager
    /// </summary>
    [pbr::OriginalName("ChatSocket")] ChatSocket = 9,
    /// <summary>
    ///  Chat 内部API
    /// repo: MDNode
    /// folder: MD.Messager
    /// </summary>
    [pbr::OriginalName("ChatApi")] ChatApi = 10,
    /// <summary>
    ///  Chat HTTP 
    ///  chatmq.mingdao.com
    /// repo: MDNode
    /// folder: MD.Messager
    /// </summary>
    [pbr::OriginalName("ChatHttp")] ChatHttp = 11,
    /// <summary>
    ///  Chat 群聊头像服务
    ///  avatar.mingdao.com
    /// repo: MDNode
    /// folder: MD.Messager
    /// </summary>
    [pbr::OriginalName("ChatAvatar")] ChatAvatar = 12,
    /// <summary>
    ///  Chat 队列服务
    /// repo: MDNode
    /// folder: MD.Messager
    /// </summary>
    [pbr::OriginalName("ChatQueue")] ChatQueue = 13,
    /// <summary>
    ///  邮件连接器
    /// repo: MDNode 
    /// folder: MD.Mail_v2
    /// </summary>
    [pbr::OriginalName("MyMail")] MyMail = 14,
    /// <summary>
    ///  邮件连接器 扫描本地文件上传服务
    /// repo: MDNode
    /// folder: uploadqiniu
    /// </summary>
    [pbr::OriginalName("MyMailUploader")] MyMailUploader = 15,
    /// <summary>
    ///  邮件连接器 静态附件承载服务
    /// repo: MDNode
    /// folder: MD.MailFileserver
    /// </summary>
    [pbr::OriginalName("MyMailFileService")] MyMailFileService = 16,
    /// <summary>
    ///  运维工具
    /// repo: MDTools
    /// folder: /
    /// </summary>
    [pbr::OriginalName("OpTool")] OpTool = 17,
    /// <summary>
    ///  三方账号联合登录服务
    /// repo: MDServices
    /// folder: MD.TPLogin
    /// </summary>
    [pbr::OriginalName("TpLogin")] TpLogin = 18,
    /// <summary>
    ///  短链生成服务
    /// repo: MDServices
    /// folder: MD.UrlParser
    /// </summary>
    [pbr::OriginalName("UrlParser")] UrlParser = 19,
    /// <summary>
    ///  微信公众号服务
    /// repo: MDServices
    /// folder: MD.Weixin
    /// </summary>
    [pbr::OriginalName("WeixinMPService")] WeixinMpservice = 20,
    /// <summary>
    ///  明道大使
    /// repo: MDServices
    /// folder: MD.LP
    /// </summary>
    [pbr::OriginalName("LP")] Lp = 21,
    /// <summary>
    ///  OWA
    /// repo: MDServices
    /// folder: MD.OWA
    /// </summary>
    [pbr::OriginalName("OwaService")] OwaService = 22,
    /// <summary>
    ///  实体关联服务
    /// repo: MDServices
    /// folder: MD.Relation
    /// </summary>
    [pbr::OriginalName("RelationService")] RelationService = 23,
    /// <summary>
    /// 计数服务(外网)
    /// mq.mingdao.com
    /// repo: MDNotification 
    /// folder: MD.Notification
    /// </summary>
    [pbr::OriginalName("Counting")] Counting = 24,
    /// <summary>
    ///  计数服务(内网)
    /// repo: MDNotification 
    /// folder: MD.Notification
    /// </summary>
    [pbr::OriginalName("CountingInternal")] CountingInternal = 25,
    /// <summary>
    ///  App Push 服务
    /// repo: MDNotification
    /// folder: MD.PushMQ
    /// </summary>
    [pbr::OriginalName("PushQueue")] PushQueue = 26,
    /// <summary>
    ///  Push Server API 服务
    /// repo: MDNotification
    /// folder: MD.Pushserver
    /// </summary>
    [pbr::OriginalName("PushServer")] PushServer = 27,
    /// <summary>
    ///  会议室预定
    /// repo: MDApps 
    /// folder: MD.bookMeeting
    /// </summary>
    [pbr::OriginalName("Meetingroom")] Meetingroom = 28,
    /// <summary>
    ///  开放平台
    /// open.mingdao.com
    /// repo: MDOpen
    /// folder: MDOpen
    /// </summary>
    [pbr::OriginalName("Open")] Open = 29,
    /// <summary>
    /// Manage
    /// manage.mingdao.com
    /// repo: MDManage
    /// folder: /
    /// </summary>
    [pbr::OriginalName("MDManage")] Mdmanage = 30,
    /// <summary>
    ///  审批
    /// repo: MDPlus 
    /// folder: /
    /// </summary>
    [pbr::OriginalName("Approval")] Approval = 31,
    /// <summary>
    ///  OA
    /// repo: MDOA
    /// folder: /
    /// </summary>
    [pbr::OriginalName("OA")] Oa = 32,
    /// <summary>
    ///  Mingdao内部 CRM
    /// repo: MDCRM2.0 
    /// folder: /
    /// </summary>
    [pbr::OriginalName("MDCRM")] Mdcrm = 33,
  }

  /// <summary>
  ///  明道 developers
  /// </summary>
  public enum Developer {
    /// <summary>
    ///  未知
    /// </summary>
    [pbr::OriginalName("Undefined")] Undefined = 0,
    /// <summary>
    ///  RavenZhu 朱颖骏
    /// </summary>
    [pbr::OriginalName("RavenZhu")] RavenZhu = 1,
    /// <summary>
    ///  	金可伟
    /// </summary>
    [pbr::OriginalName("JerryJin")] JerryJin = 2,
    /// <summary>
    ///   俞杭杰
    /// </summary>
    [pbr::OriginalName("EricYu")] EricYu = 3,
    /// <summary>
    ///  邹昕
    /// </summary>
    [pbr::OriginalName("SinZou")] SinZou = 4,
    /// <summary>
    ///  沈阳
    /// </summary>
    [pbr::OriginalName("WellsShen")] WellsShen = 5,
    /// <summary>
    ///  高喜庆
    /// </summary>
    [pbr::OriginalName("CarloseGao")] CarloseGao = 6,
    /// <summary>
    ///  吴群群
    /// </summary>
    [pbr::OriginalName("LeoWu")] LeoWu = 7,
    /// <summary>
    ///  杨广
    /// </summary>
    [pbr::OriginalName("TobyYang")] TobyYang = 8,
    /// <summary>
    ///  朱斌
    /// </summary>
    [pbr::OriginalName("RennbonZhu")] RennbonZhu = 9,
    /// <summary>
    ///  奶茶贝
    /// </summary>
    [pbr::OriginalName("BeckJin")] BeckJin = 10,
    /// <summary>
    ///  孙伟
    /// </summary>
    [pbr::OriginalName("AllenSun")] AllenSun = 11,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  The request message containing the user's name.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MingLog : pb::IMessage<MingLog> {
    private static readonly pb::MessageParser<MingLog> _parser = new pb::MessageParser<MingLog>(() => new MingLog());
    public static pb::MessageParser<MingLog> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Minglogger.MinglogReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public MingLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    public MingLog(MingLog other) : this() {
      timeStamp_ = other.timeStamp_;
      hostName_ = other.hostName_;
      serviceType_ = other.serviceType_;
      developer_ = other.developer_;
      clientIp_ = other.clientIp_;
      stack_ = other.stack_;
      message_ = other.message_;
      action_ = other.action_;
      accountId_ = other.accountId_;
      projectId_ = other.projectId_;
      level_ = other.level_;
      extras_ = other.extras_.Clone();
    }

    public MingLog Clone() {
      return new MingLog(this);
    }

    /// <summary>Field number for the "timeStamp" field.</summary>
    public const int TimeStampFieldNumber = 1;
    private int timeStamp_;
    /// <summary>
    ///  时间戳 
    ///  example: 1483583631190
    /// </summary>
    public int TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "hostName" field.</summary>
    public const int HostNameFieldNumber = 2;
    private string hostName_ = "";
    /// <summary>
    /// 服务器主机名
    ///  example: cw_web,cw_meihua
    /// </summary>
    public string HostName {
      get { return hostName_; }
      set {
        hostName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serviceType" field.</summary>
    public const int ServiceTypeFieldNumber = 3;
    private global::Minglogger.ServiceType serviceType_ = 0;
    /// <summary>
    /// 服务类型
    ///  example : Master= 主站
    /// </summary>
    public global::Minglogger.ServiceType ServiceType {
      get { return serviceType_; }
      set {
        serviceType_ = value;
      }
    }

    /// <summary>Field number for the "developer" field.</summary>
    public const int DeveloperFieldNumber = 4;
    private global::Minglogger.Developer developer_ = 0;
    /// <summary>
    ///  日志记录者
    ///  example: Raven
    /// </summary>
    public global::Minglogger.Developer Developer {
      get { return developer_; }
      set {
        developer_ = value;
      }
    }

    /// <summary>Field number for the "clientIp" field.</summary>
    public const int ClientIpFieldNumber = 5;
    private string clientIp_ = "";
    /// <summary>
    ///  服务Ip
    /// </summary>
    public string ClientIp {
      get { return clientIp_; }
      set {
        clientIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stack" field.</summary>
    public const int StackFieldNumber = 6;
    private string stack_ = "";
    /// <summary>
    ///  错误Stack信息
    /// </summary>
    public string Stack {
      get { return stack_; }
      set {
        stack_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 7;
    private string message_ = "";
    /// <summary>
    ///  日志文本信息
    /// </summary>
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 8;
    private string action_ = "";
    /// <summary>
    ///  操作类型
    ///  example: "createtask","sendpush"
    /// </summary>
    public string Action {
      get { return action_; }
      set {
        action_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 9;
    private string accountId_ = "";
    /// <summary>
    ///  当前用户accountid
    /// </summary>
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "projectId" field.</summary>
    public const int ProjectIdFieldNumber = 10;
    private string projectId_ = "";
    /// <summary>
    /// 当前用户projectid
    /// </summary>
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 11;
    private global::Minglogger.LogLevel level_ = 0;
    /// <summary>
    ///  日志级别
    /// </summary>
    public global::Minglogger.LogLevel Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "extras" field.</summary>
    public const int ExtrasFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Minglogger.Extras> _repeated_extras_codec
        = pb::FieldCodec.ForMessage(98, global::Minglogger.Extras.Parser);
    private readonly pbc::RepeatedField<global::Minglogger.Extras> extras_ = new pbc::RepeatedField<global::Minglogger.Extras>();
    /// <summary>
    ///  其他有用的信息字典
    /// </summary>
    public pbc::RepeatedField<global::Minglogger.Extras> Extras {
      get { return extras_; }
    }

    public override bool Equals(object other) {
      return Equals(other as MingLog);
    }

    public bool Equals(MingLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeStamp != other.TimeStamp) return false;
      if (HostName != other.HostName) return false;
      if (ServiceType != other.ServiceType) return false;
      if (Developer != other.Developer) return false;
      if (ClientIp != other.ClientIp) return false;
      if (Stack != other.Stack) return false;
      if (Message != other.Message) return false;
      if (Action != other.Action) return false;
      if (AccountId != other.AccountId) return false;
      if (ProjectId != other.ProjectId) return false;
      if (Level != other.Level) return false;
      if(!extras_.Equals(other.extras_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (TimeStamp != 0) hash ^= TimeStamp.GetHashCode();
      if (HostName.Length != 0) hash ^= HostName.GetHashCode();
      if (ServiceType != 0) hash ^= ServiceType.GetHashCode();
      if (Developer != 0) hash ^= Developer.GetHashCode();
      if (ClientIp.Length != 0) hash ^= ClientIp.GetHashCode();
      if (Stack.Length != 0) hash ^= Stack.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Action.Length != 0) hash ^= Action.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      hash ^= extras_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TimeStamp != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TimeStamp);
      }
      if (HostName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HostName);
      }
      if (ServiceType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ServiceType);
      }
      if (Developer != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Developer);
      }
      if (ClientIp.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ClientIp);
      }
      if (Stack.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Stack);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Message);
      }
      if (Action.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Action);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(AccountId);
      }
      if (ProjectId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ProjectId);
      }
      if (Level != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Level);
      }
      extras_.WriteTo(output, _repeated_extras_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (TimeStamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeStamp);
      }
      if (HostName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostName);
      }
      if (ServiceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ServiceType);
      }
      if (Developer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Developer);
      }
      if (ClientIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientIp);
      }
      if (Stack.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Stack);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Action.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Action);
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Level);
      }
      size += extras_.CalculateSize(_repeated_extras_codec);
      return size;
    }

    public void MergeFrom(MingLog other) {
      if (other == null) {
        return;
      }
      if (other.TimeStamp != 0) {
        TimeStamp = other.TimeStamp;
      }
      if (other.HostName.Length != 0) {
        HostName = other.HostName;
      }
      if (other.ServiceType != 0) {
        ServiceType = other.ServiceType;
      }
      if (other.Developer != 0) {
        Developer = other.Developer;
      }
      if (other.ClientIp.Length != 0) {
        ClientIp = other.ClientIp;
      }
      if (other.Stack.Length != 0) {
        Stack = other.Stack;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Action.Length != 0) {
        Action = other.Action;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      extras_.Add(other.extras_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TimeStamp = input.ReadInt32();
            break;
          }
          case 18: {
            HostName = input.ReadString();
            break;
          }
          case 24: {
            serviceType_ = (global::Minglogger.ServiceType) input.ReadEnum();
            break;
          }
          case 32: {
            developer_ = (global::Minglogger.Developer) input.ReadEnum();
            break;
          }
          case 42: {
            ClientIp = input.ReadString();
            break;
          }
          case 50: {
            Stack = input.ReadString();
            break;
          }
          case 58: {
            Message = input.ReadString();
            break;
          }
          case 66: {
            Action = input.ReadString();
            break;
          }
          case 74: {
            AccountId = input.ReadString();
            break;
          }
          case 82: {
            ProjectId = input.ReadString();
            break;
          }
          case 88: {
            level_ = (global::Minglogger.LogLevel) input.ReadEnum();
            break;
          }
          case 98: {
            extras_.AddEntriesFrom(input, _repeated_extras_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  其他有用的信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Extras : pb::IMessage<Extras> {
    private static readonly pb::MessageParser<Extras> _parser = new pb::MessageParser<Extras>(() => new Extras());
    public static pb::MessageParser<Extras> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Minglogger.MinglogReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Extras() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Extras(Extras other) : this() {
      key_ = other.key_;
      value_ = other.value_;
    }

    public Extras Clone() {
      return new Extras(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Extras);
    }

    public bool Equals(Extras other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    public void MergeFrom(Extras other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  操作执行结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ExecuteResult : pb::IMessage<ExecuteResult> {
    private static readonly pb::MessageParser<ExecuteResult> _parser = new pb::MessageParser<ExecuteResult>(() => new ExecuteResult());
    public static pb::MessageParser<ExecuteResult> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Minglogger.MinglogReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ExecuteResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ExecuteResult(ExecuteResult other) : this() {
      isSuccess_ = other.isSuccess_;
      error_ = other.error_;
    }

    public ExecuteResult Clone() {
      return new ExecuteResult(this);
    }

    /// <summary>Field number for the "isSuccess" field.</summary>
    public const int IsSuccessFieldNumber = 1;
    private bool isSuccess_;
    /// <summary>
    ///  操作是否执行成功
    /// </summary>
    public bool IsSuccess {
      get { return isSuccess_; }
      set {
        isSuccess_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    private string error_ = "";
    /// <summary>
    ///  错误信息
    /// </summary>
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ExecuteResult);
    }

    public bool Equals(ExecuteResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsSuccess != other.IsSuccess) return false;
      if (Error != other.Error) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (IsSuccess != false) hash ^= IsSuccess.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsSuccess != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsSuccess);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Error);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (IsSuccess != false) {
        size += 1 + 1;
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      return size;
    }

    public void MergeFrom(ExecuteResult other) {
      if (other == null) {
        return;
      }
      if (other.IsSuccess != false) {
        IsSuccess = other.IsSuccess;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsSuccess = input.ReadBool();
            break;
          }
          case 18: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
