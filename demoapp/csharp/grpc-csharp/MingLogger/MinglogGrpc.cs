// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minglog.proto
// Original file comments:
// *
// Created by Raven on 2017-01-05
//
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Minglogger {
  /// <summary>
  ///  The log service definition.
  /// </summary>
  public static class LogService
  {
    static readonly string __ServiceName = "minglogger.LogService";

    static readonly Marshaller<global::Minglogger.MingLog> __Marshaller_MingLog = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Minglogger.MingLog.Parser.ParseFrom);
    static readonly Marshaller<global::Minglogger.ExecuteResult> __Marshaller_ExecuteResult = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Minglogger.ExecuteResult.Parser.ParseFrom);

    static readonly Method<global::Minglogger.MingLog, global::Minglogger.ExecuteResult> __Method_WriteLog = new Method<global::Minglogger.MingLog, global::Minglogger.ExecuteResult>(
        MethodType.Unary,
        __ServiceName,
        "WriteLog",
        __Marshaller_MingLog,
        __Marshaller_ExecuteResult);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Minglogger.MinglogReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of LogService</summary>
    public abstract class LogServiceBase
    {
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Minglogger.ExecuteResult> WriteLog(global::Minglogger.MingLog request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for LogService</summary>
    public class LogServiceClient : ClientBase<LogServiceClient>
    {
      /// <summary>Creates a new client for LogService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public LogServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for LogService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public LogServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected LogServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected LogServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual global::Minglogger.ExecuteResult WriteLog(global::Minglogger.MingLog request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return WriteLog(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual global::Minglogger.ExecuteResult WriteLog(global::Minglogger.MingLog request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_WriteLog, null, options, request);
      }
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual AsyncUnaryCall<global::Minglogger.ExecuteResult> WriteLogAsync(global::Minglogger.MingLog request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return WriteLogAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual AsyncUnaryCall<global::Minglogger.ExecuteResult> WriteLogAsync(global::Minglogger.MingLog request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_WriteLog, null, options, request);
      }
      protected override LogServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new LogServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(LogServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_WriteLog, serviceImpl.WriteLog).Build();
    }

  }
}
#endregion
